# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  docker_image_name: 'academy'
  docker_tag_name: 'vp'
  artifact_name: 'artifact_name'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven



    - name: Maven Build
      uses: ./.github/actions/maven_build
    - name: Docker build
      uses: ./.github/actions/docker_build
      with:
        image_name: ${{env.docker_image_name}}
        tag_name: ${{env.docker_tag_name}}

    - name: Save for file
      run: docker save -o "${{env.docker_image_name}}.tar" ${{env.docker_image_name}}:${{env.docker_tag_name}}

    - name: Upload File
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.artifact_name}}
        path: ${{env.docker_image_name}}.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker
      uses: ./.github/actions/docker_push
      with:
        docker_hub_username: ${{secrets.DOCKERHUB_USERNAME}}
        docker_image: "${{env.docker_image_name}}:latest"

  checkImages:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - uses: actions/download-artifact@v4
        with:
          name: ${{env.artifact_name}}
      - run: docker load -i ${{env.docker_image_name}}.tar
      - name: Docker Image
        run: docker image ls




